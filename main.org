#+title: Assignment 2

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_CLASS_OPTIONS: [9pt,twocolumn]
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{cleveref}
#+LATEX_HEADER: \usepackage{amsthm}
#+LATEX_HEADER: \usepackage{pythonhighlight}
#+LATEX_HEADER_EXTRA:  \usepackage{mdframed}
#+LATEX_HEADER_EXTRA: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER_EXTRA: \AfterEndEnvironment{minted}{\end{mdframed}}
#+LATEX_HEADER_EXTRA: \newtheorem{theorem}{Theorem}
#+OPTIONS: toc:nil
#+OPTIONS: num:nil


* Question 1

Given the following graph

#+BEGIN_SRC dot :file Question1_graph.png
graph auth {
rankdir=LR;
node [shape=record];
1 [label="1"]
2 [label="2"]
3 [label="3"]
4 [label="4"]
1 -- 2
1 -- 3
1 -- 4
2 -- 3
3 -- 4

}
#+END_SRC

#+RESULTS:
[[file:Question1_graph.png]]

Calculate all walks of size 6 in the given graph


** Answer
In order to do so we'll use the following theorem

#+name: theorem:walk
\begin{theorem} [ Walks Theorem ]
If A is the adjacency matrix of a graph or digraph G with vertices \( \{v1, . . . vn\} \), then the i, j entry
of \(A^k\) is the number of walks of length k from \(v_i\) to \(v_j\)
\end{theorem}

By [[theorem:walk]] we can just multiple the adjacency matrix by itself 6 times
and we'll get all the walks available from node i into node j

Since the problem specify undirected graph we'll have to sum all elements of the matrix and divide it by 2

\newpage
#+NAME: algo:walk
\begin{algorithm}
\caption{All walks of length 6 }
\begin{algorithmic}
\State \(n \gets 6 \) \Comment{6 => length of walk}
\State \( Adj  \) \Comment{adjacency matrix}
\State \( M \gets I \)
\While{ \(n \neq 0 \) }
\State \( M \gets M \times Adj \) \Comment{Matrix Multiples}
\EndWhile
\State \( sum \gets 0 \)
\While{ $a \in M $}
\State \( sum \gets sum + a \)
\EndWhile
\end{algorithmic}
\end{algorithm}

We will apply *algorithm* [[algo:walk]]  for getting the number of walk of length 6

#+name: calculate:walks
#+ATTR_LATEX: :environment python
#+begin_example python :session :results value :exports both
import numpy
from numpy.linalg import matrix_power
input_array = numpy.array([[0,1,1,1],
                           [1,0,1,0],
                           [1,1,0,1],
                           [1,0,1,0]])
A_to_power6 = matrix_power(input_array, 6)
sum_var = 0
for row in A_to_power6:
    for elem in row:
        sum_var += elem
int(sum_var/2)
# output is 557
#+end_example



* Question 2
#+ATTR_LATEX: :environment quotation
Consider the following quote
#+BEGIN_QUOTE
"Undirected Graph can be considered as directed graph"
#+END_QUOTE
Prove it

Formally , Given an Undirected graph find a directed graph such that \( A_G = A_{G'}  \)


** Answer
Given An undirected graph mark it \( G=(V,E) \) and the adjacency matrix of his as \( A_G \)

Define the directed graph \(G'=(V',E')\) where \(V'=V\) and

\[ \forall e=(v_1,v_2)\in E : e_1=(v_1,v_2) , e_2=(v_2,v_1)\in E'  \]

The adjancey matrix of the directed graph is equal to the adjancey matrix of the undirected graph

\[ A_G=A_{G'} \]



* Question 3
Prove that given a directed graph \(G=(V,E)\) where \(V=(1,2,..,n)\) , let A be the adjacency matrix
\[ l \in \mathbb{N}\cap{\{0\}}: \forall i,j\in V : F(j,i ,l)=(A^l)_{i,j} \]
where \( F:V \times V \times \mathbb{N}\cap{\{0\}} \rightarrow \mathbb{N}\cap{\{0\}} \)
are all the walks from node j to i of length l

** Answer
We'll prove the theorem by induction
\begin{proof}
By induction

\underline{\textbf{Base Case:}}
For k = 1, \( A^k = A \), and there is a walk of length 1 between i and j
if and only if \(a_{ij} = 1\), thus the result holds.


\underline{\textbf{Step Case:}}
Assume the proposition holds for
\( k = n \) and consider the matrix \( A_{n+l} = A_nA \), By the inductive hypothesis, the
\( (i,j)^{th} \) entry of \( A_n \) counts the number of walks of length n between vertices i
and j. Now, the number of walks of length n + 1 between i and j equals the
number of walks of length n from vertex i to each vertex v that is adjacent to j.
But this is the \( (i,j)^{th} \) entry of \( A^nA = A^{n+1} \) the non-zero entries of the column
of A corresponding to v are precisely the first neighbours of v. Thus the result
follows by induction on n
\end{proof}

* Question 4
Find the number of possible walks of length 8 from 1 to 4 by the following undirected graph

#+BEGIN_SRC dot :file Question4_graph.png
digraph auth {
rankdir=LR;
node [shape=record];
1 [label="1"]
2 [label="2"]
3 [label="3"]
4 [label="4"]
1 -> 3
1 -> 4
2 -> 1
2 -> 3
3 -> 4
3 -> 1
4 -> 2

}
#+END_SRC


#+RESULTS:
[[file:Question4_graph.png]]
** Answer
We'll Write the adjancey matrix and calculate the \( A^8 \)

To do so we'll use the same code

#+name: calculate:question4:walks
#+ATTR_LATEX: :environment python
#+begin_example python :session :results value :exports both
import numpy
from numpy.linalg import matrix_power
input_array = numpy.array([[0,1,1,0],
                           [0,0,0,1],
                           [1,1,0,0],
                           [1,0,1,0]])
A_to_power6 = matrix_power(input_array, 8)
A_to_power6[3][0]
# output is 23
#+end_example

#+begin_src python :session :results value :exports none
import numpy
from numpy.linalg import matrix_power
input_array = numpy.array([[0,1,1,0],
                           [0,0,0,1],
                           [1,1,0,0],
                           [1,0,1,0]])
A_to_power6 = matrix_power(input_array, 8)
A_to_power6[3][0]
# output is 23
#+end_src

#+RESULTS:
: 23

* Introduction
Kruskal's algorithm[1] finds a minimum spanning forest of an undirected edge-weighted graph. If the graph is connected, it finds a minimum spanning tree. (A minimum spanning tree of a connected graph is a subset of the edges that forms a tree that includes every vertex, where the sum of the weights of all the edges in the tree is minimized. For a disconnected graph, a minimum spanning forest is composed of a minimum spanning tree for each connected component.) It is a greedy algorithm in graph theory as in each step it adds the next lowest-weight edge that will not form a cycle to the minimum spanning forest.[2]



This algorithm first appeared in Proceedings of the American Mathematical Society, pp. 48–50 in 1956, and was written by Joseph Kruskal.[3] It was rediscovered by Loberman & Weinberger (1957).[4]

Other algorithms for this problem include Prim's algorithm, the reverse-delete algorithm, and Borůvka's algorithm.


* Simple pseudo code
Here is some code

This is some random text



#+begin_mdframed
\begin{algorithmic}
\State $i \gets 10$
\If{$i\geq 5$}
    \State $i \gets i-1$
\Else
    \If{$i\leq 3$}
        \State $i \gets i+2$
    \EndIf
\EndIf
\end{algorithmic}
#+end_mdframed

bla bla bla


Another Example , please note the following


\begin{algorithm}
\caption{An algorithm with caption}\label{alg:cap}
\begin{algorithmic}
\Require $n \geq 0$
\Ensure $y = x^n$
\State $y \gets 1$
\State $X \gets x$
\State $N \gets n$
\While{$N \neq 0$}
\If{$N$ is even}
    \State $X \gets X \times X$
    \State $N \gets \frac{N}{2}$  \Comment{This is a comment}
\ElsIf{$N$ is odd}
    \State $y \gets y \times X$
    \State $N \gets N - 1$
\EndIf
\EndWhile
\end{algorithmic}
\end{algorithm}
